import{_ as e,o as i,c as a,R as t}from"./chunks/framework.GAJuE5ww.js";const r="/osp-learning/assets/image_DpaeTi88Ue.9rENQcCd.png",f=JSON.parse('{"title":"04 Threads & Concurrency","description":"","frontmatter":{},"headers":[],"relativePath":"04-threads-and-concurrency.md","filePath":"04-threads-and-concurrency.md","lastUpdated":1729693534000}'),o={name:"04-threads-and-concurrency.md"},n=t('<h1 id="_04-threads-concurrency" tabindex="-1">04 Threads &amp; Concurrency <a class="header-anchor" href="#_04-threads-concurrency" aria-label="Permalink to &quot;04 Threads &amp; Concurrency&quot;">​</a></h1><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li><p>Overview</p></li><li><p>Multicore Programming</p></li><li><p>Multithreading Models</p></li><li><p>Thread Libraries</p></li><li><p>Implicit Threading</p></li><li><p>Threading Issues</p></li><li><p>Operating System Examples</p></li></ul><h3 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives&quot;">​</a></h3><ul><li><p>To introduce the notion of a thread—a fundamental unit of CPU utilization that forms the basis of multithreaded computer systems</p></li><li><p>To discuss the APIs for the Pthreads, Windows, and Java thread libraries</p></li><li><p>To explore several strategies that provide implicit threading</p></li><li><p>To examine issues related to multithreaded programming</p></li><li><p>To cover operating system support for threads in Windows and Linux</p></li></ul><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><ul><li>并发：交替执行（如果是一个核的话）</li><li>并行：多任务同时执行</li></ul><h3 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h3><p>Most modern applications are multithreaded. Threads run within application.</p><p>Multiple tasks with the application can be implemented by separate threads 应用程序的多个任务可由不同的线程执行. As:</p><ul><li><p>Update display</p></li><li><p>Fetch data</p></li><li><p>Spell checking</p></li><li><p>Answer a network request.</p></li></ul><p>Process creation is heavy-weight while thread creation is light-weight 进程创建花费的时间是线程创建的 30 倍</p><p>Can simplify code, increase efficiency 可以简化代码，提高效率</p><p>Kernels are generally multithreaded 内核通常是多线程的</p><p>Benefits:</p><ul><li>Responsiveness 可响应性</li><li>Resource Sharing 资源共享</li><li>Economy 经济</li><li>Scalability 可扩展性</li></ul><h2 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><p><a href="https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/02.%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noreferrer">https://ng-tech.icu/books/linux-notes/01.进程与处理器/进程与线程/02.用户线程与内核线程/</a></p><p>在 Linux 2.4 版以前，线程的实现和管理方式就是完全按照进程方式实现的；在 Linux 2.6 之前，内核并不支持线程的概念，仅通过轻量级进程（Lightweight Process）模拟线程；轻量级进程是建立在内核之上并由内核支持的用户线程，它是内核线程的高度抽象，每一个轻量级进程都与一个特定的内核线程关联。内核线程只能由内核管理并像普通进程一样被调度。这种模型最大的特点是线程调度由内核完成了，而其他线程操作（同步、取消）等都是核外的线程库（Linux Thread）函数完成的。</p><p>为了完全兼容 Posix 标准，Linux 2.6 首先对内核进行了改进，引入了线程组的概念（<strong>仍然用轻量级进程表示线程</strong>），有了这个概念就可以将一组线程组织称为一个进程，不过内核并没有准备特别的调度算法或是定义特别的数据结构来表征线程；相反，线程仅仅被视为一个与其他进程（概念上应该是线程）共享某些资源的进程（概念上应该是线程）。在实现上主要的改变就是在 task_struct 中加入 tgid 字段，这个字段就是用于表示线程组 id 的字段。在用户线程库方面，也使用 NPTL 代替 Linux Thread，不同调度模型上仍然采用 <code>1 对 1</code> 模型。</p><p><img src="'+r+'" alt=""></p><p>进程的实现是调用 fork 系统调用：<code>pid_t fork(void);</code>，线程的实现是调用 clone 系统调用：<code>int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ...)</code>。与标准 <code>fork()</code> 相比，线程带来的开销非常小，内核无需单独复制进程的内存空间或文件描写叙述符等等。这就节省了大量的 CPU 时间，使得线程创建比新进程创建快上十到一百倍，能够大量使用线程而无需太过于操心带来的 CPU 或内存不足。无论是 fork、vfork、kthread_create 最后都是要调用 do_fork，而 do_fork 就是根据不同的函数参数，对一个进程所需的资源进行分配。</p><h3 id="内核线程" tabindex="-1">内核线程 <a class="header-anchor" href="#内核线程" aria-label="Permalink to &quot;内核线程&quot;">​</a></h3><p>内核线程是由内核自己创建的线程，也叫做守护线程（Deamon），在终端上用命令 <code>ps -Al</code> 列出的所有进程中，名字以 k 开关以 d 结尾的往往都是内核线程，比如 kthreadd、kswapd 等。与用户线程相比，它们都由 <code>do_fork()</code> 创建，每个线程都有独立的 task_struct 和内核栈；也都参与调度，内核线程也有优先级，会被调度器平等地换入换出。二者的不同之处在于，内核线程只工作在内核态中；而用户线程则既可以运行在内核态（执行系统调用时），也可以运行在用户态；内核线程没有用户空间，所以对于一个内核线程来说，它的 0~3G 的内存空间是空白的，它的 <code>current-&gt;mm</code> 是空的，与内核使用同一张页表；而用户线程则可以看到完整的 0~4G 内存空间。</p><p>在 Linux 内核启动的最后阶段，系统会创建两个内核线程，一个是 init，一个是 kthreadd。其中 init 线程的作用是运行文件系统上的一系列”init”脚本，并启动 shell 进程，所以 init 线程称得上是系统中所有用户进程的祖先，它的 pid 是 1。kthreadd 线程是内核的守护线程，在内核正常工作时，它永远不退出，是一个死循环，它的 pid 是 2。</p>',25),l=[n];function s(d,c,p,h,u,m){return i(),a("div",null,l)}const g=e(o,[["render",s]]);export{f as __pageData,g as default};
