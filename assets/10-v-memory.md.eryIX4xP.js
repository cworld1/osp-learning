import{_ as e,o as a,c as o,R as i}from"./chunks/framework.XJWvSVd6.js";const _=JSON.parse('{"title":"10 Virtual Memory","description":"","frontmatter":{},"headers":[],"relativePath":"10-v-memory.md","filePath":"10-v-memory.md","lastUpdated":1704373151000}'),t={name:"10-v-memory.md"},l=i('<h1 id="_10-virtual-memory" tabindex="-1">10 Virtual Memory <a class="header-anchor" href="#_10-virtual-memory" aria-label="Permalink to &quot;10 Virtual Memory&quot;">​</a></h1><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li><p>Background</p></li><li><p>Demand Paging</p></li><li><p>Copy-on-Write</p></li><li><p>Page Replacement</p></li><li><p>Allocation of Frames </p></li><li><p>Thrashing</p></li><li><p>Memory-Mapped Files</p></li><li><p>Allocating Kernel Memory</p></li><li><p>Other Considerations</p></li><li><p>Operating-System Examples</p></li></ul><h3 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives&quot;">​</a></h3><ul><li><p>To describe the benefits of a virtual memory system</p></li><li><p>To explain the concepts of demand paging, page-replacement algorithms, and allocation of page frames</p></li><li><p>To discuss the principle of the working-set model</p></li><li><p>To examine the relationship between shared memory and memory-mapped files</p></li><li><p>To explore how kernel memory is managed</p></li></ul><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p>逻辑地址 -(分段)→ 线性地址 -(分页)→ 物理地址</p><p>例题：</p><blockquote><p>[2020 统考真题]某 32 位系统采用装干二级页表的请求分页存储管理方式，按字节便址， 页目录项和页表项长度均为 4 字节，虚拟地址结构如下所示。</p><p>页目录号（10 位）、页号（10 位）、页内偏移量（12 位）</p><p>某 C 程序中款组 a[1024][1024]的起始虚权地址为 1080 0000H、数组元素占 4 字节，该程序运行时，其进程的页目录起始物理地址为 0020 1000H，请回答下列问题。</p><p>1)数组元素 a[1][2]的虚拟地址是什么？对应的页目录号和页号分別是什么？对应的页目录项的物理地址是什么？若该目源项中存放的页框号为 00301H，则 a[1][2]所在页对应的页表项的物理地址是什么？</p></blockquote>',9),r=[l];function p(n,s,m,c,d,h){return a(),o("div",null,r)}const f=e(t,[["render",p]]);export{_ as __pageData,f as default};
