import{_ as e,o as a,c as t,R as i}from"./chunks/framework.GAJuE5ww.js";const l="/osp-learning/assets/image_B7IZF8A4AA.j1Yo25aC.png",b=JSON.parse('{"title":"14 File System Implementation","description":"","frontmatter":{},"headers":[],"relativePath":"14-file-sys-implement.md","filePath":"14-file-sys-implement.md","lastUpdated":1729693534000}'),o={name:"14-file-sys-implement.md"},n=i('<h1 id="_14-file-system-implementation" tabindex="-1">14 File System Implementation <a class="header-anchor" href="#_14-file-system-implementation" aria-label="Permalink to &quot;14 File System Implementation&quot;">​</a></h1><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li>File-System Structure </li><li>File-System Implementation </li><li>Directory Implementation </li><li>Allocation Methods </li><li>Free-Space Management </li><li>Efficiency and Performance </li><li>Recovery </li><li>NFS </li><li>Example: WAFL File System</li></ul><h3 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives&quot;">​</a></h3><ul><li><p>To describe the details of implementing local file systems and directory structures </p></li><li><p>To describe the implementation of remote file systems </p></li><li><p>To discuss block allocation and free-block algorithms and trade- </p><p>offs</p></li></ul><h2 id="file-system-structure" tabindex="-1">File-System Structure <a class="header-anchor" href="#file-system-structure" aria-label="Permalink to &quot;File-System Structure&quot;">​</a></h2><ul><li>File structure <ul><li>Logical storage unit 逻辑存储单元</li><li>Collection of related information 相关信息的收集</li></ul></li><li>File system resides on secondary storage (disks) <ul><li>Provided user interface to storage, mapping logical to physical 提供存储用户界面，将逻辑映射到物理</li><li>Provides efficient and convenient access to disk by allowing data to be stored, located retrieved easily 通过允许存储数据、轻松检索来提供对磁盘的高效便捷访问</li></ul></li><li>Disk provides in-place rewrite and random access 磁盘提供就地重写和随机访问</li></ul><p>I/O transfers performed in blocks of sectors (usually 512 bytes)</p><ul><li>File control block – storage structure consisting of information about a file</li><li>Device driver controls the physical device 设备驱动程序控制物理设备</li><li>File system organized into layers 文件系统组织成层</li></ul><h3 id="file-system-layers-cont" tabindex="-1">File System Layers (Cont.) <a class="header-anchor" href="#file-system-layers-cont" aria-label="Permalink to &quot;File System Layers (Cont.)&quot;">​</a></h3><p>Each with its own format (CD-ROM is ISO 9660; Unix has UFS, FFS; Windows has FAT, FAT32, NTFS as well as floppy, CD, DVD Blu-ray, Linux has more than 40 types, with extended file system ext2 and ext3 leading; plus distributed file systems, etc.)</p><h2 id="file-system-implementation" tabindex="-1">File-System Implementation <a class="header-anchor" href="#file-system-implementation" aria-label="Permalink to &quot;File-System Implementation&quot;">​</a></h2><p>We have system calls at the API level, but how do we implement their functions? 我们在 API 级别有系统调用，但我们如何实现它们的功能？ </p><blockquote><p>On-disk and in-memory structures</p></blockquote><p><strong>Boot control block</strong> contains info needed by system to boot OS from that volume <strong>启动控制块</strong>包含系统从该卷启动操作系统所需的信息 </p><blockquote><p>Needed if volume contains OS, usually first block of volume </p></blockquote><p><strong>Volume control block</strong> <strong>(superblock, master file table</strong>) contains volume details 卷宗<strong>控制块</strong> <strong>（超级块，主文件表</strong>）包含卷详细信息</p><blockquote><p>Total # of blocks, # of free blocks, block size, free block pointers or array </p></blockquote><p>Directory structure organizes the files 目录结构组织文件</p><blockquote><p>Names and inode numbers, master file table</p></blockquote><h2 id="directory-implementation" tabindex="-1">Directory Implementation <a class="header-anchor" href="#directory-implementation" aria-label="Permalink to &quot;Directory Implementation&quot;">​</a></h2><h2 id="allocation-methods" tabindex="-1">Allocation Methods <a class="header-anchor" href="#allocation-methods" aria-label="Permalink to &quot;Allocation Methods&quot;">​</a></h2><h3 id="allocation-methods-linked" tabindex="-1">Allocation Methods - Linked <a class="header-anchor" href="#allocation-methods-linked" aria-label="Permalink to &quot;Allocation Methods - Linked&quot;">​</a></h3><p><strong>Linked allocation</strong> – each file a linked list of blocks <strong>链接分配</strong> - 每个文件一个链接的块列表</p><ul><li>File ends at nil pointer 文件在零指针处结束</li><li>No external fragmentation 没有外部碎片</li><li>Each block contains pointer to next block</li><li>No compaction, external fragmentation 无压实，外部碎片</li><li>Free space management system called when new block needed 当需要新块时调用自由空间管理系统</li><li>Improve efficiency by clustering blocks into groups but increases internal fragmentation 通过将块聚类为组来提高效率，但会增加内部碎片</li><li>Reliability can be a problem 可靠性可能是一个问题</li><li>Locating a block can take many I/Os and disk seeks 定位块可能需要许多 I/O 和磁盘查找</li></ul><h3 id="fat-variation" tabindex="-1">FAT Variation <a class="header-anchor" href="#fat-variation" aria-label="Permalink to &quot;FAT Variation&quot;">​</a></h3><p>FAT (File Allocation Table 文件分配表) variation</p><ul><li>Beginning of volume has table, indexed by block number</li><li>Much like a linked list, but faster on disk and cacheable</li><li>New block allocation simple</li></ul><p>Each file is a linked list of disk blocks: blocks may be scattered anywhere on the disk</p><p><img src="'+l+'" alt=""></p><h2 id="free-space-management" tabindex="-1">Free-Space Management <a class="header-anchor" href="#free-space-management" aria-label="Permalink to &quot;Free-Space Management&quot;">​</a></h2><h2 id="efficiency-and-performance" tabindex="-1">Efficiency and Performance <a class="header-anchor" href="#efficiency-and-performance" aria-label="Permalink to &quot;Efficiency and Performance&quot;">​</a></h2><h2 id="recovery" tabindex="-1">Recovery <a class="header-anchor" href="#recovery" aria-label="Permalink to &quot;Recovery&quot;">​</a></h2><h2 id="nfs" tabindex="-1">NFS <a class="header-anchor" href="#nfs" aria-label="Permalink to &quot;NFS&quot;">​</a></h2><h2 id="example-wafl-file-system" tabindex="-1">Example: WAFL File System <a class="header-anchor" href="#example-wafl-file-system" aria-label="Permalink to &quot;Example: WAFL File System&quot;">​</a></h2>',35),s=[n];function r(c,m,d,h,u,p){return a(),t("div",null,s)}const y=e(o,[["render",r]]);export{b as __pageData,y as default};
