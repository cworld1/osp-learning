import{_ as e,o as t,c as o,R as i}from"./chunks/framework.XJWvSVd6.js";const a="/assets/image_MkFnQoG0IS.LgXdvths.png",f=JSON.parse('{"title":"01 How Computer Work","description":"","frontmatter":{},"headers":[],"relativePath":"01-how-computer-work.md","filePath":"01-how-computer-work.md","lastUpdated":1704373151000}'),r={name:"01-how-computer-work.md"},n=i('<h1 id="_01-how-computer-work" tabindex="-1">01 How Computer Work <a class="header-anchor" href="#_01-how-computer-work" aria-label="Permalink to &quot;01 How Computer Work&quot;">​</a></h1><h2 id="the-first-introduction" tabindex="-1">The first introduction <a class="header-anchor" href="#the-first-introduction" aria-label="Permalink to &quot;The first introduction&quot;">​</a></h2><ul><li>PC？ (when the computer is turned on)</li><li>X86, Solid mode, CS&lt;&lt;4+IP</li><li>Set CS=OxFFFF, IP=Ox0000→0xFFFFO(Rom Bios)</li><li>Check RAM, keyboard, display, disk......</li><li>Read the contents of track 0 and sector 0 on the disk into</li><li>memory(0x7c00)</li><li>Set CS=0x07c0, IP=0x0000</li><li>The story of os begin.....</li></ul><h3 id="最初的引导程序" tabindex="-1">最初的引导程序 <a class="header-anchor" href="#最初的引导程序" aria-label="Permalink to &quot;最初的引导程序&quot;">​</a></h3><p>文件名为 <code>bootsect.s</code>，使用汇编语言编写。</p><h4 id="operating-systems-defination" tabindex="-1">Operating systems defination <a class="header-anchor" href="#operating-systems-defination" aria-label="Permalink to &quot;Operating systems defination&quot;">​</a></h4><ul><li>No universally accepted definition</li><li>&quot;Everything a vendor ships when you order an operating system&quot; is a good approximation <ul><li>But varies wildly</li></ul></li><li>&quot;The one program running at all times on the computer&quot; is the kernel.</li><li>Everything else is either <ul><li>a system program (ships with the operating system)</li><li>or an application program.</li></ul></li></ul><h2 id="computer-system-organization" tabindex="-1">Computer-System Organization <a class="header-anchor" href="#computer-system-organization" aria-label="Permalink to &quot;Computer-System Organization&quot;">​</a></h2><p>现代通用计算机系统由一个或多个 CPU 和多个设备控制器通过公共总线连接，提供组件和共享内存之间的访问。每个设备控制器负责一个特定类型的设备(例如,磁盘驱动器、音频设备或图形显示器)。根据控制器的不同，可以连接多个设备。例如，一个系统的 USB 端口可以连接到一个 USB 集线器，多个设备可以连接到 USB 集线器。设备控制器维护一些本地缓冲存储和一组专用寄存器。设备控制器负责在其控制的外围设备和本地缓冲存储之间移动数据。</p><p><img src="'+a+'" alt=""></p><h3 id="系统中断" tabindex="-1">系统中断 <a class="header-anchor" href="#系统中断" aria-label="Permalink to &quot;系统中断&quot;">​</a></h3><p>概述硬件可以通过向 CPU 发送信号来随时触发中断，通常是通过系统总线的方式。（计算机系统内部可能存在多条总线,但系统总线是各主要部件之间通信的主要通路。）中断也用于许多其他目的，是操作系统和硬件交互的关键部分。当 CPU 中断时，它停止它正在做的事情，并立即将执行转移到一个固定的位置。</p>',12),s=[n];function l(h,d,c,p,m,u){return t(),o("div",null,s)}const k=e(r,[["render",l]]);export{f as __pageData,k as default};
